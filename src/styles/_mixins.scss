@use './variables' as *;

// 响应式断点混入
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}.";
  }
}

// Flexbox 布局混入
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-column-center {
  @include flex-column;
  align-items: center;
  justify-content: center;
}

// 按钮样式混入
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: spacing(2) spacing(4);
  border: none;
  border-radius: border-radius(md);
  font-size: font-size(sm);
  font-weight: font-weight(medium);
  line-height: 1.25;
  text-align: center;
  text-decoration: none;
  cursor: pointer;
  transition: all transition(base);
  user-select: none;

  &:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(color(primary), 0.1);
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

@mixin button-primary {
  @include button-base;
  background-color: color(primary);
  color: color(white);

  &:hover:not(:disabled) {
    background-color: color(primary-dark);
  }

  &:active:not(:disabled) {
    transform: translateY(1px);
  }
}

@mixin button-secondary {
  @include button-base;
  background-color: color(gray-200);
  color: color(gray-800);

  &:hover:not(:disabled) {
    background-color: color(gray-300);
  }
}

@mixin button-success {
  @include button-base;
  background-color: color(success);
  color: color(white);

  &:hover:not(:disabled) {
    background-color: color(success-dark);
  }
}

@mixin button-danger {
  @include button-base;
  background-color: color(danger);
  color: color(white);

  &:hover:not(:disabled) {
    background-color: color(danger-dark);
  }
}

// 卡片样式混入
@mixin card {
  background-color: color(white);
  border-radius: border-radius(lg);
  box-shadow: shadow(sm);
  border: 1px solid color(gray-200);
  transition: all transition(base);

  &:hover {
    box-shadow: shadow(md);
  }
}

@mixin card-dark {
  background-color: color(dark-surface);
  border-color: color(dark-border);
  color: color(dark-text);
}

// 输入框样式混入
@mixin input-base {
  width: 100%;
  padding: spacing(3) spacing(4);
  border: 1px solid color(gray-300);
  border-radius: border-radius(md);
  font-size: font-size(sm);
  line-height: 1.25;
  background-color: color(white);
  transition: all transition(base);

  &:focus {
    outline: none;
    border-color: color(primary);
    box-shadow: 0 0 0 3px rgba(color(primary), 0.1);
  }

  &:disabled {
    background-color: color(gray-100);
    cursor: not-allowed;
  }

  &::placeholder {
    color: color(gray-400);
  }
}

@mixin input-dark {
  background-color: color(dark-surface);
  border-color: color(dark-border);
  color: color(dark-text);

  &::placeholder {
    color: color(gray-500);
  }
}

// 文本截断混入
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-truncate-lines($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// 隐藏滚动条混入
@mixin hide-scrollbar {
  -ms-overflow-style: none;
  scrollbar-width: none;

  &::-webkit-scrollbar {
    display: none;
  }
}

// 自定义滚动条混入
@mixin custom-scrollbar($thumb-color: color(gray-400), $track-color: transparent) {
  &::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }

  &::-webkit-scrollbar-track {
    background: $track-color;
  }

  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: border-radius(full);

    &:hover {
      background: darken($thumb-color, 10%);
    }
  }
}

// 深色模式混入
@mixin dark-mode {
  .dark & {
    @content;
  }
}

// 位置固定混入
@mixin position-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// 清除浮动混入
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// 渐变背景混入
@mixin gradient-bg($start-color, $end-color, $direction: to right) {
  background: linear-gradient($direction, $start-color, $end-color);
}

// 动画混入
@mixin fade-in($duration: transition(base)) {
  animation: fadeIn $duration ease-out;
}

@mixin slide-in-left($duration: transition(base)) {
  animation: slideInLeft $duration ease-out;
}

@mixin slide-in-right($duration: transition(base)) {
  animation: slideInRight $duration ease-out;
}

// 交易相关混入
@mixin price-color($direction) {
  @if $direction == up {
    color: color(price-up);
  } @else if $direction == down {
    color: color(price-down);
  }
}

@mixin trading-card {
  @include card;
  padding: spacing(4);

  @include dark-mode {
    @include card-dark;
  }
}

// 图表容器混入
@mixin chart-container {
  position: relative;
  width: 100%;
  height: 100%;
  min-height: 400px;
  background-color: color(white);
  border-radius: border-radius(lg);
  overflow: hidden;

  @include dark-mode {
    background-color: color(dark-surface);
  }
}

// 加载状态混入
@mixin loading-skeleton {
  background: linear-gradient(
    90deg,
    color(gray-200) 25%,
    color(gray-100) 50%,
    color(gray-200) 75%
  );
  background-size: 200% 100%;
  animation: loading 1.5s infinite;

  @include dark-mode {
    background: linear-gradient(
      90deg,
      color(gray-700) 25%,
      color(gray-600) 50%,
      color(gray-700) 75%
    );
    background-size: 200% 100%;
  }
}

// 工具提示混入
@mixin tooltip($position: top) {
  position: relative;

  &::after {
    content: attr(data-tooltip);
    position: absolute;
    z-index: map-get($z-index, tooltip);
    padding: spacing(2) spacing(3);
    background-color: color(gray-900);
    color: color(white);
    font-size: font-size(xs);
    border-radius: border-radius(sm);
    white-space: nowrap;
    opacity: 0;
    pointer-events: none;
    transition: opacity transition(fast);

    @if $position == top {
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      margin-bottom: spacing(2);
    } @else if $position == bottom {
      top: 100%;
      left: 50%;
      transform: translateX(-50%);
      margin-top: spacing(2);
    } @else if $position == left {
      right: 100%;
      top: 50%;
      transform: translateY(-50%);
      margin-right: spacing(2);
    } @else if $position == right {
      left: 100%;
      top: 50%;
      transform: translateY(-50%);
      margin-left: spacing(2);
    }
  }

  &:hover::after {
    opacity: 1;
  }
}